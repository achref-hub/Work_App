import React, {useState, useEffect} from 'react'
import jwt from 'jwt-decode'
import {fetchZone} from '../../actions/ZoneAction';
import { fetchBuilding } from '../../actions/BuildingAction';

export default function Building(){

    const storage = JSON.parse(localStorage.getItem("user"))
    const token = storage.token
    
    var [floors , setFloors] = useState([]);
    var [exist , setExist] = useState(false)

    const user = jwt(token)
    useEffect(async() =>{
        const result = await fetchBuilding(token)
        let data = Array.from(result, ({Floors}) => Floors)
        setFloors(data)
        console.log(data)
    }, []);
    useEffect( async() => {
        const result = await fetchZone(token, user.id)
        let data = Array.from(result, ({floor_num}) => floor_num )
        console.log(data)
        setExist(data)
    }, []);
    const zone=((item)=>{
        console.log("aaaaa",item.floor_map_web_active);
        return (item.floor_map_web_active)
        // if( exist ===item.floor_num ) 
        // {console.log("aaaaa",item);
        //     return (item.floor_map_web_active)}
        // else {console.log("else",item.floor_map_web);
        //     return (item.floor_map_web)}
    })
    //<div dangerouslySetInnerHTML={{ __html: floors }} />
    return(
        <div >
            
         {
            floors[0] && floors[0].map((item)=> (
                 <li >
                    <div dangerouslySetInnerHTML={{ __html: <svg>
<path d="M1834.94 1001.09C1844.02 1006.33 1844.02 1014.84 1834.94 1020.09L1275.4 1343.11C1267.85 1347.47 1256.13 1348.3 1246.97 1345.13L945.44 1240.64C943.81 1240.08 942.306 1239.4 940.961 1238.62L516.071 993.335C514.679 992.531 513.469 991.628 512.471 990.649L340.462 821.906C335.084 816.63 336.565 809.922 344.063 805.593L903.727 482.499C912.815 477.253 927.549 477.253 936.637 482.499L1834.94 1001.09Z" fill="#002171" stroke="#5472D3" strokeWidth="4"/>
<path d="M840.22 781.402C842.612 782.782 842.612 785.021 840.22 786.401L552.678 952.399C549.917 953.993 545.311 953.709 543.198 951.813L380.33 805.71C378.77 804.311 379.111 802.474 381.149 801.297L623.586 661.338C625.978 659.958 629.855 659.958 632.247 661.338L840.22 781.402Z" fill="#5472D3" fillOpacity="0.5"/>
<path d="M1613.4 1112.21C1615.79 1113.59 1615.79 1115.83 1613.4 1117.21L1276.27 1311.84C1274.26 1312.99 1271.15 1313.2 1268.73 1312.35L1038.03 1230.48C1034.65 1229.28 1034.11 1226.57 1036.91 1224.96L1419.44 1005.23C1421.84 1003.85 1425.7 1003.85 1428.09 1005.23L1613.4 1112.21Z" fill="#5472D3" fillOpacity="0.5"/>
<rect width="172.28" height="115.624" rx="5" transform="matrix(-0.866044 0.499967 -0.866044 -0.499967 1817.33 1000.81)" fill="#5472D3" fillOpacity="0.5"/>
<line x1="0.0147055" y1="812" x2="268.015" y2="813.971" stroke="#CFCFCF" strokeWidth="4"/>
<path d="M43.3906 787.465H36.2305V795H33.9805V777.938H44.5508V779.789H36.2305V785.625H43.3906V787.465ZM49.2617 795H47.0938V777H49.2617V795ZM52.168 788.543C52.168 787.301 52.4102 786.184 52.8945 785.191C53.3867 784.199 54.0664 783.434 54.9336 782.895C55.8086 782.355 56.8047 782.086 57.9219 782.086C59.6484 782.086 61.043 782.684 62.1055 783.879C63.1758 785.074 63.7109 786.664 63.7109 788.648V788.801C63.7109 790.035 63.4727 791.145 62.9961 792.129C62.5273 793.105 61.8516 793.867 60.9688 794.414C60.0938 794.961 59.0859 795.234 57.9453 795.234C56.2266 795.234 54.832 794.637 53.7617 793.441C52.6992 792.246 52.168 790.664 52.168 788.695V788.543ZM54.3477 788.801C54.3477 790.207 54.6719 791.336 55.3203 792.188C55.9766 793.039 56.8516 793.465 57.9453 793.465C59.0469 793.465 59.9219 793.035 60.5703 792.176C61.2188 791.309 61.543 790.098 61.543 788.543C61.543 787.152 61.2109 786.027 60.5469 785.168C59.8906 784.301 59.0156 783.867 57.9219 783.867C56.8516 783.867 55.9883 784.293 55.332 785.145C54.6758 785.996 54.3477 787.215 54.3477 788.801ZM65.8555 788.543C65.8555 787.301 66.0977 786.184 66.582 785.191C67.0742 784.199 67.7539 783.434 68.6211 782.895C69.4961 782.355 70.4922 782.086 71.6094 782.086C73.3359 782.086 74.7305 782.684 75.793 783.879C76.8633 785.074 77.3984 786.664 77.3984 788.648V788.801C77.3984 790.035 77.1602 791.145 76.6836 792.129C76.2148 793.105 75.5391 793.867 74.6562 794.414C73.7812 794.961 72.7734 795.234 71.6328 795.234C69.9141 795.234 68.5195 794.637 67.4492 793.441C66.3867 792.246 65.8555 790.664 65.8555 788.695V788.543ZM68.0352 788.801C68.0352 790.207 68.3594 791.336 69.0078 792.188C69.6641 793.039 70.5391 793.465 71.6328 793.465C72.7344 793.465 73.6094 793.035 74.2578 792.176C74.9062 791.309 75.2305 790.098 75.2305 788.543C75.2305 787.152 74.8984 786.027 74.2344 785.168C73.5781 784.301 72.7031 783.867 71.6094 783.867C70.5391 783.867 69.6758 784.293 69.0195 785.145C68.3633 785.996 68.0352 787.215 68.0352 788.801ZM86.2461 784.266C85.918 784.211 85.5625 784.184 85.1797 784.184C83.7578 784.184 82.793 784.789 82.2852 786V795H80.1172V782.32H82.2266L82.2617 783.785C82.9727 782.652 83.9805 782.086 85.2852 782.086C85.707 782.086 86.0273 782.141 86.2461 782.25V784.266ZM98.7148 788.637H92.9961V786.867H98.7148V788.637ZM107.562 786.445L108.43 777.938H117.172V779.941H110.27L109.754 784.594C110.59 784.102 111.539 783.855 112.602 783.855C114.156 783.855 115.391 784.371 116.305 785.402C117.219 786.426 117.676 787.812 117.676 789.562C117.676 791.32 117.199 792.707 116.246 793.723C115.301 794.73 113.977 795.234 112.273 795.234C110.766 795.234 109.535 794.816 108.582 793.98C107.629 793.145 107.086 791.988 106.953 790.512H109.004C109.137 791.488 109.484 792.227 110.047 792.727C110.609 793.219 111.352 793.465 112.273 793.465C113.281 793.465 114.07 793.121 114.641 792.434C115.219 791.746 115.508 790.797 115.508 789.586C115.508 788.445 115.195 787.531 114.57 786.844C113.953 786.148 113.129 785.801 112.098 785.801C111.152 785.801 110.41 786.008 109.871 786.422L109.297 786.891L107.562 786.445Z" fill="#77777D"/>
 </svg>}} />
                    {/* {
                        console.log(zone(item),"fffff  ")
                    } */}
                 </li>
             ))
         }         
        </div>

    );
} 